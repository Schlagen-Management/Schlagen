@page "/EmploymentOpportunities"

@using Schlagen.Services
@using Schlagen.Data.EntityClasses
@using Microsoft.AspNetCore.Identity
@using Radzen.Blazor

@inject UserManager<IdentityUser> UserManager
@inherits OwningComponentBase<IEmploymentServices>

<h3>Current Openings</h3>

<br />

@if (employmentLocations == null && employmentTypes == null
  && jobTypes == null && jobRequisitions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="row">
                <div class="col-md-12"><button class="btn btn-primary">Add Job Requisition</button></div>
            </div>

            <br />
        </Authorized>
    </AuthorizeView>

    <div class="row">
        <div class="col-md-4">
            <RadzenDropDown Data="@employmentLocations" TValue="int"
                            TextProperty="Name" ValueProperty="EmploymentLocationId"
                            Placeholder="Select Location ..." />
        </div>
        <div class="col-md-4">
            <RadzenDropDown Data="@employmentTypes" TValue="int"
                            TextProperty="Name" ValueProperty="EmploymentTypeId"
                            Placeholder="Select employment type ..." />
        </div>
        <div class="col-md-4">
            <RadzenDropDown Data="@jobTypes" TValue="int"
                            TextProperty="Name" ValueProperty="JobTypeId"
                            Placeholder="Select job type ..." />
        </div>
    </div>
    <div class="row">

    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    public List<EmploymentLocation> employmentLocations;

    public List<EmploymentType> employmentTypes;

    public List<JobType> jobTypes;

    public List<JobRequisitionForList> jobRequisitions;

    protected override async Task OnInitializedAsync()
    {
        employmentTypes
            = await @Service.GetEmploymentTypesAsync();

        employmentLocations
            = await @Service.GetEmploymentLocationsAsync();

        jobTypes
            = await @Service.GetJobTypesAsync();

        jobRequisitions
            = await @Service.GetAllJobRequisitionsAsync();
    }
}
