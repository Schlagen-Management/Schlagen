@page "/Contact"

@using Schlagen.Services
@using Schlagen.Data.EntityClasses
@using Microsoft.AspNetCore.Identity
@using Radzen.Blazor
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Microsoft.Extensions.Configuration
@using SendGrid
@using SendGrid.Helpers.Mail
@using System.Text
@using System.Net
@using Microsoft.Extensions.Logging


@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IEmailService EmailService
@inject IToastService ToastService
@inject ILogger<Contact> Logger
@inherits OwningComponentBase<IInformationRequestServices>

<section id="page-heading">
    <div class="container">
        <div class="row">
            <div class="col"><h1>Contact</h1></div>
        </div>
    </div>
</section>

<section id="Contact">
    <div class="container">
        <div class="row">
            <div class="col">
                <EditForm Model="@informationRequest"
                          OnValidSubmit="SaveInformationRequest">
                    <!-- Use data annotation validator due to ease and simplicity -->
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="Name">Name</label>
                        <InputText id="Name" class="form-control"
                                   @bind-Value="@informationRequest.Name" />
                        <ValidationMessage For="@(() => informationRequest.Name)" />
                    </div>
                    <div class="form-group">
                        <label for="Email">Email Address</label>
                        <InputText id="Email" class="form-control"
                                   @bind-Value="@informationRequest.Email" />
                        <ValidationMessage For="@(() => informationRequest.Email)" />
                    </div>
                    <div class="form-group">
                        <label for="Phone">Phone Number</label>
                        <InputText id="Phone" class="form-control"
                                   @bind-Value="@informationRequest.Phone" />
                        <ValidationMessage For="@(() => informationRequest.Phone)" />
                    </div>
                    <div class="form-group">
                        <label for="InformationRegarding">Requested Information</label>
                        <Radzen.Blazor.RadzenDropDown Name="InformationRegarding" class="form-control"
                                                      @bind-Value="@informationRequest.InformationRegardingId"
                                                      Data="@informationTypes" TextProperty="Name"
                                                      ValueProperty="InformationTypeId"
                                                      Placeholder="Select type of information requested" />

                    </div>
                    <div class="form-group">
                        <label for="Details">Request Details</label>
                        <InputTextArea id="Details" class="form-control"
                                       @bind-Value="@informationRequest.Details" />
                        <ValidationMessage For="@(() => informationRequest.Details)" />
                    </div>
                    <button class="btn btn-primary" type="submit">Submit</button>
                </EditForm>
            </div>
            <div class="col">
                ... some text goes here
            </div>
        </div>
    </div>
</section>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    public InformationRequest informationRequest { get; set; } = new InformationRequest();

    public List<InformationType> informationTypes { get; set; } = new List<InformationType>();

    public string captchaToken { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Get the reCaptcha token

            // Get the sitekey from app settings
            var siteKey = Configuration.GetSection("AppSettings")["CaptchaSiteKey"];

            captchaToken = await JSRuntime.InvokeAsync<string>("runCaptcha", siteKey, "ContactPage");
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Get the collection of information types to potentially
        // request
        //informationTypes
        //    = await @Service.GetInformationTypes();
    }

    protected async Task SaveInformationRequest()
    {
        // Validate the reCaptcha token
        if (Validate(captchaToken) == true)
        {
            // Email the info to the specified email address
            var result
                = await SendInformationRequest(informationRequest);

            if (result.StatusCode != HttpStatusCode.Accepted)
            {
                Logger.LogError("Contact:SaveInformationRequest - Error sending the information request");

                ToastService.ShowError("Error encountered sending information request", "ERROR");

                return;
            }

            // Persist the information to the DB
            var success
                = await @Service.AddInformationRequest(informationRequest.Name,
                    informationRequest.Email, informationRequest.Phone,
                    informationRequest.InformationRegardingId,
                    informationRequest.Details);

            if (success == false)
            {
                Logger.LogError("Contact:SaveInformationRequest - Error saving information request to the database");

                ToastService.ShowError("Error encountered saving your information request", "ERROR");
            }

            ToastService.ShowSuccess("Your information request has been sent", "SUCCESS");

            // Navigate back to the home page
            NavigationManager.NavigateTo("/");
        }
    }

    protected bool Validate(string gResponse)
    {
        using (var client = new System.Net.WebClient())
        {
            try
            {
                // Enter your reCAPTCHA private key here, get it from AppSettings
                var secretKey = Configuration.GetSection("AppSettings")["CaptchaSecretKey"];

                var gReply = client.DownloadString(string.Format(
                        "https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}",
                        secretKey, gResponse));

                // Are we dealing with a human
                var googleReply = JsonSerializer.Deserialize<ReCaptcha>(gReply);
                return (googleReply.Success == true);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Contact:Validate - Error validating reCaptcha response");

                throw;
            }
        }
    }

    protected async Task<Response> SendInformationRequest(InformationRequest request)
    {
        // Build and send the email
        var adminEmail
            = Configuration.GetSection("AppSettings")["AdminEmail"];
        var _5thFloorInformationEmail
            = Configuration.GetSection("AppSettings")["5thFloorInformationEmail"];
        var from = new EmailAddress(adminEmail);
        var to = new EmailAddress(_5thFloorInformationEmail);
        var subject = "New Avalon Innovation Club Information Request";

        // Get the description of the selected information type
        var informationType
            = await @Service.GetInformationType(request.InformationRegardingId);

        // Build the message
        var message = new StringBuilder();
        message = message.AppendLine(string.Format("Name: {0}", request.Name));
        message = message.AppendLine(string.Format("Email: {0}", request.Email));
        message = message.AppendLine(string.Format("Phone: {0}", request.Phone));
        message = message.AppendLine(string.Format("Type of Information: {0}",
            informationType != null ? informationType.Name : "N/A"));
        message = message.AppendLine(string.Format("Details: {0}", request.Details));

        // Send the email
        return await @EmailService.SendEmail(from, to, subject, message.ToString());
    }
}
